@import url('https://fonts.googleapis.com/css?family=Montserrat:400,600,700&display=swap');
/// poly-fluid-sizing
/// Generate linear interpolated size values through multiple break points
/// @param $property - A string CSS property name
/// @param $map - A Sass map of viewport unit and size value pairs
/// @requires function linear-interpolation
/// @requires function map-sort
/// @example
///   @include poly-fluid-sizing('font-size', (576px: 22px, 768px: 24px, 992px: 34px));
/// @author Jake Wilson <jake.e.wilson@gmail.com>
@function map-sort-by-values($map) {
  // Transform map to zipped list
  $keys: ();
  $values: ();

  @each $key, $val in $map {
    $keys: append($keys, $key);
    $values: append($values, $val);
  }

  $list: zip($keys, $values);

  $sortedMap: ();
  @while length($list) > 0 {

    // Find smallest pair
    $smallestPair: nth($list, 1);
    @each $pair in $list {
      $value: nth($pair, 2);
      $smallestValue: nth($smallestPair, 2);
      @if $value < $smallestValue {
        $smallestPair: $pair;
      }
    }

    // Add smallest pair to sorted map
    $key: nth($smallestPair, 1);
    $value: nth($smallestPair, 2);
    $sortedMap: map-merge($sortedMap, ($key: $value));

    // Remove from list smallest pair
    $smallestPairIndex: index($list, $smallestPair);
    $newList: ();
    @for $i from 1 through length($list) {
      @if $i != $smallestPairIndex {
        $newList: append($newList, nth($list, $i), "space");
      }
    }
    $list: $newList;
  }

  @return $sortedMap;
}
@mixin poly-fluid-sizing($property, $map) {
  // Get the number of provided breakpoints
  $length: length(map-keys($map));

  // Error if the number of breakpoints is < 2
  @if ($length < 2) {
    @error "poly-fluid-sizing() $map requires at least values"
  }

  // Sort the map by viewport width (key)
  $map: map-sort-by-values($map);
  $keys: map-keys($map);

  // Minimum size
  #{$property}: map-get($map, nth($keys,1));

  // Interpolated size through breakpoints
  @for $i from 1 through ($length - 1) {
    @media (min-width:nth($keys,$i)) {
      $value1: map-get($map, nth($keys,$i));
      $value2: map-get($map, nth($keys,($i + 1)));
      // If values are not equal, perform linear interpolation
      @if ($value1 != $value2) {
        #{$property}: linear-interpolation((nth($keys,$i): $value1, nth($keys,($i+1)): $value2));
      } @else {
        #{$property}: $value1;
      }
    }
  }

  // Maxmimum size
  @media (min-width:nth($keys,$length)) {
    #{$property}: map-get($map, nth($keys,$length));
  }
}



@function linear-interpolation($map) {
  $keys: map-keys($map);
  @if (length($keys) != 2) {
    @error "linear-interpolation() $map must be exactly 2 values";
  }
  // The slope
  $m: (map-get($map, nth($keys, 2)) - map-get($map, nth($keys, 1)))/(nth($keys, 2) - nth($keys,1));

  // The y-intercept
  $b: map-get($map, nth($keys, 1)) - $m * nth($keys, 1);

  // Determine if the sign should be positive or negative
  $sign: "+";
  @if ($b < 0) {
    $sign: "-";
    $b: abs($b);
  }

  @return calc(#{$m*100}vw #{$sign} #{$b});
}

:root {
  --dark-green: #3EB13C;
  --green: #48CB44;
  --light-green: #5BD659;
  --dark-blue: #3C64B1;
  --blue: #4C79CE;
  --error: #F58888;
  --light-blue: #6290E8;
  --dark-yellow: #FFB800;
  --yellow: #FFCD4E;
  --light-yellow: #FFDC81;
  --dark-red: #FF0000;
  --red: #FF4E4E;
  --light-red: #FF8181;
  --disabled: #B7BBC2;
  --dark-gray: #C3CBCD;
  --gray: #C2C2C2;
  --light-gray: #E2E5E6;
  --icon-gray: #BEBEBE;
  --white: #FFFFFF;
  --black: #3F4C67;
  --background: #E5E5E5;
}

html {
  font-family: 'Montserrat', 'Source Sans Pro', -apple-system, BlinkMacSystemFont, 'Segoe UI',
  Roboto, 'Helvetica Neue', Arial, sans-serif;
  font-size: 100%;
  -webkit-font-smoothing: antialiased;
  box-sizing: border-box;

  body {
    @include poly-fluid-sizing('font-size', (320px: 12px, 576px: 14px, 768px: 14.5px, 992px: 14px, 1280px: 14px, 1600px: 16px));
    color: var(--black);
    margin: 0 auto;
    background-color: var(--background);
  }

  .text-small {
    @include poly-fluid-sizing('font-size', (320px: 12px, 576px: 12px, 768px: 12.5px, 992px: 13px, 1280px: 12px));
  }

  //h1 {
  //
  //  font-size: 2rem;
  //  line-height: 2.5rem;
  //
  //}

  h1 {
    // Minimum font-size
    color: var(--dark-blue);
    font-size: 22px;
    font-weight: bold;
    // Font-size between 576 - 768
    @media (min-width:576px) {
      $map: (576px: 22px, 768px: 24px);
      font-size: linear-interpolation($map);
    }
    // Font-size between 768 - 992
    @media (min-width:768px) {
      $map: (768px: 24px, 992px: 34px);
      font-size: linear-interpolation($map);
    }
    // Maximum font-size
    @media (min-width:992px) {
      font-size: 34px;
    }
  }

  h2 {
    color: var(--dark-blue);
    font-size: 1.5rem;
    line-height: 2rem;
    font-weight: bold;
  }

  a {
    text-decoration: none;
    cursor: pointer;
    outline: none;
    &.link {
      color: #874FFF;
      transition: transform 200ms;

      &:hover {
        color: var(--dark-blue);
      }

      &:active, &:focus {
        transform: scale(0.9);
        color: var(--light-blue);
      }
    }
  }
  .black {
    color: var(--black);
  }
  .grid .grid-row {
    display: flex;
    box-sizing: border-box;
    justify-content: flex-start;
  }

  .grid .grid-row.hidden {
    display: none;
  }

  .grid .grid-row + .grid-row {
    margin-top: 1rem;
  }

  .grid .grid-row + .grid-row.nomargin {
    margin-top: 0;
  }

  .grid .grid-row [data-column] {
    box-sizing: border-box;
  }

  .grid .grid-row.align-items-center {
    align-items: center;
  }

  .grid .grid-row [data-column] + [data-column] {
    margin-left: 1rem;
  }

  .grid [data-column="1"] {
    flex-grow: 1;
    flex-basis: 72px;
  }

  .grid [data-column="2"] {
    flex-grow: 2;
    flex-basis: 160px;
  }

  .grid [data-column="3"] {
    flex-grow: 3;
    flex-basis: 248px;
  }

  .grid [data-column="4"] {
    flex-grow: 4;
    flex-basis: 336px;
  }

  .grid [data-column="5"] {
    flex-grow: 5;
    flex-basis: 424px;
  }

  .grid [data-column="6"] {
    flex-grow: 6;
    flex-basis: 512px;
  }

  .grid [data-column="7"] {
    flex-grow: 7;
    flex-basis: 600px;
  }

  .grid [data-column="8"] {
    flex-grow: 8;
    flex-basis: 688px;
  }

  .grid [data-column="9"] {
    flex-grow: 9;
    flex-basis: 776px;
  }

  .grid [data-column="10"] {
    flex-grow: 10;
    flex-basis: 864px;
  }

  .grid [data-column="11"] {
    flex-grow: 11;
    flex-basis: 952px;
  }

  .grid [data-column="12"] {
    flex-grow: 12;
    flex-basis: 1040px;
  }

  @media (max-width: 600px) {
    .grid .grid-row {
      display: block;
      box-sizing: border-box;
      width: 100%;
      margin: 0;
    }
    .grid [data-column="1"],
    .grid [data-column="2"],
    .grid [data-column="3"],
    .grid [data-column="4"],
    .grid [data-column="5"],
    .grid [data-column="6"],
    .grid [data-column="7"],
    .grid [data-column="8"],
    .grid [data-column="9"],
    .grid [data-column="10"],
    .grid [data-column="11"],
    .grid [data-column="12"] {
      flex-grow: 1;
      flex-basis: 100%;
    }
  }

  .left-margin-s {
    margin-left: 0.5rem;
  }

  .left-margin {
    margin-left: 1rem;
  }

  .left-margin-m {
    margin-left: 1.5rem;
  }

  .left-margin-l {
    margin-left: 2rem;
  }

  .top-margin-s {
    margin-top: 0.5rem;
  }

  .top-margin {
    margin-top: 1rem;
  }

  .top-margin-m {
    margin-top: 1.5rem;
  }

  .top-margin-l {
    margin-top: 2rem;
  }

  .bottom-margin-s {
    margin-bottom: 0.5rem;
  }

  .bottom-margin {
    margin-bottom: 1rem;
  }

  .bottom-margin-m {
    margin-bottom: 1rem;
  }

  .bottom-margin-l {
    margin-bottom: 1rem;
  }

  .right-margin-s {
    margin-right: 0.5rem;
  }

  .right-margin {
    margin-right: 1rem;
  }

  .right-margin-m {
    margin-right: 1.5rem;
  }

  .right-margin-l {
    margin-right: 2rem;
  }

  .left-padding-s {
    padding-left: 0.5rem;
  }

  .left-padding {
    padding-left: 1rem;
  }

  .left-padding-m {
    padding-left: 1.5rem;
  }

  .left-padding-l {
    padding-left: 2rem;
  }

  .top-padding-s {
    padding-top: 0.5rem;
  }

  .top-padding {
    padding-top: 1rem;
  }

  .top-padding-m {
    padding-top: 1.5rem;
  }

  .top-padding-l {
    padding-top: 2rem;
  }

  .bottom-padding-s {
    padding-bottom: 0.5rem;
  }

  .bottom-padding {
    padding-bottom: 1rem;
  }

  .bottom-padding-m {
    padding-bottom: 1rem;
  }

  .bottom-padding-l {
    padding-bottom: 1rem;
  }

  .right-padding-s {
    padding-right: 0.5rem;
  }

  .right-padding {
    padding-right: 1rem;
  }

  .right-padding-m {
    padding-right: 1.5rem;
  }

  .right-padding-l {
    padding-right: 2rem;
  }

  .flex {
    display: flex;
  }

  .block {
    display: block;
  }

  .inline-block {
    display: inline-block;
  }

  .column {
    flex-direction: column;
  }

  .space-between {
    justify-content: space-between;
  }

  .space-around {
    justify-content: space-around;
  }

  .text-center {
    text-align: center;
  }



  .icon {
    fill: var(--icon-gray);
    cursor: pointer;
    transition: transform 200ms;

    &:hover {
      fill: var(--blue);
    }

    &:active {
      fill: var(--light-blue);
      transform: scale(0.9);
    }
  }

  .height-normal {
    line-height: 1rem;
  }

  .semi-bold {
    font-weight: 600;
  }

  .bold {
    font-weight: bold;
  }

  .gray {
    color: var(--gray)
  }

  .width-100 {
    width: 100%;
  }

  .absolute {
    position: absolute;
  }

  .relative {
    position: relative;
  }

  .back-arrow {
    cursor: pointer;
    top: 16px;
    left: 16px;
    fill: red;
    width: 1.5rem;
    height: 1.5rem;
    box-sizing: border-box;
    padding: 0 4px;
    transform: rotate(180deg);
    background: var(--dark-blue);

    &:hover {
      background: var(--blue);
    }

    &:active {
      background: var(--light-blue);
      transform: rotate(180deg) scale(0.9);

    }
  }

  ul {
    li {
      list-style: none;
    }
  }

}

*,
*:before,
*:after {
  padding: 0;
  box-sizing: border-box;
  margin: 0;
}

.page-enter-active, .page-leave-active {
  transition: opacity 250ms;
}

.page-enter, .page-leave-active {
  opacity: 0;
}

.content-center {
  justify-content: center;
}

.content-end {
  justify-content: flex-end;
}

.align-items-center {
  align-items: center;
}

.pointer {
  cursor: pointer;
}

.v--modal {
  border-radius: 0;
}




